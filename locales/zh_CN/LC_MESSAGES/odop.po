# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Yuanming Hu
# This file is distributed under the same license as the taichi package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
msgid ""
msgstr ""
"Project-Id-Version: taichi 0.5.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-12 14:33+0800\n"
"PO-Revision-Date: 2020-05-12 17:04+0800\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: zh_CN\n"
"X-Generator: Poedit 2.3.1\n"

#: ../../odop.rst:2
msgid "Objective data-oriented programming"
msgstr "面向数据对象式编程"

#: ../../odop.rst:4
msgid ""
"Taichi is a `data-oriented <https://en.wikipedia.org/wiki/Data-"
"oriented_design>`_ programming (DOP) language. However, simple DOP makes "
"modularization hard."
msgstr ""
"Taichi是一种 `面向数据的 <https://en.wikipedia.org/wiki/Data-"
"oriented_design>`_ 编程(DOP)语言。 但是，单纯的DOP会使模块化变得困难。"

#: ../../odop.rst:6
msgid ""
"To allow modularized code, Taichi borrow some concepts from object-"
"oriented programming (OOP)."
msgstr "为了允许代码模块化，Taichi从面向对象编程(OOP)中借鉴了一些概念。"

#: ../../odop.rst:8
msgid ""
"For convenience, let's call the hybrid scheme **objective data-oriented "
"programming** (ODOP)."
msgstr "为了方便起见，我们将称此混合方案为 **面向数据对象式编程** (ODOP)。"

#: ../../odop.rst:10
msgid "TODO: More documentation here."
msgstr "待办事项：此处应有更多文档。"

#: ../../odop.rst:12
msgid "A brief example:"
msgstr "一个简单的例子："

#: ../../odop.rst:14
msgid ""
"import taichi as ti\n"
"\n"
"ti.init()\n"
"\n"
"@ti.data_oriented\n"
"class Array2D:\n"
"  def __init__(self, n, m, increment):\n"
"    self.n = n\n"
"    self.m = m\n"
"    self.val = ti.var(ti.f32)\n"
"    self.total = ti.var(ti.f32)\n"
"    self.increment = increment\n"
"    ti.root.dense(ti.ij, (self.n, self.m)).place(self.val)\n"
"    ti.root.place(self.total)\n"
"\n"
"  @staticmethod\n"
"  @ti.func\n"
"  def clamp(x):  # Clamp to [0, 1)\n"
"      return max(0, min(1 - 1e-6, x))\n"
"\n"
"  @ti.kernel\n"
"  def inc(self):\n"
"    for i, j in self.val:\n"
"      ti.atomic_add(self.val[i, j], self.increment)\n"
"\n"
"  @ti.kernel\n"
"  def inc2(self, increment: ti.i32):\n"
"    for i, j in self.val:\n"
"      ti.atomic_add(self.val[i, j], increment)\n"
"\n"
"  @ti.kernel\n"
"  def reduce(self):\n"
"    for i, j in self.val:\n"
"      ti.atomic_add(self.total, self.val[i, j] * 4)\n"
"\n"
"arr = Array2D(128, 128, 3)\n"
"\n"
"double_total = ti.var(ti.f32, shape=())\n"
"\n"
"ti.root.lazy_grad()\n"
"\n"
"arr.inc()\n"
"arr.inc.grad()\n"
"assert arr.val[3, 4] == 3\n"
"arr.inc2(4)\n"
"assert arr.val[3, 4] == 7\n"
"\n"
"with ti.Tape(loss=arr.total):\n"
"  arr.reduce()\n"
"\n"
"for i in range(arr.n):\n"
"  for j in range(arr.m):\n"
"    assert arr.val.grad[i, j] == 4\n"
"\n"
"@ti.kernel\n"
"def double():\n"
"  double_total[None] = 2 * arr.total\n"
"\n"
"with ti.Tape(loss=double_total):\n"
"  arr.reduce()\n"
"  double()\n"
"\n"
"for i in range(arr.n):\n"
"  for j in range(arr.m):\n"
"    assert arr.val.grad[i, j] == 8"
msgstr ""
"import taichi as ti\n"
"\n"
"ti.init()\n"
"\n"
"@ti.data_oriented\n"
"class Array2D:\n"
"  def __init__(self, n, m, increment):\n"
"    self.n = n\n"
"    self.m = m\n"
"    self.val = ti.var(ti.f32)\n"
"    self.total = ti.var(ti.f32)\n"
"    self.increment = increment\n"
"    ti.root.dense(ti.ij, (self.n, self.m)).place(self.val)\n"
"    ti.root.place(self.total)\n"
"\n"
"  @staticmethod\n"
"  @ti.func\n"
"  def clamp(x):  # Clamp to [0, 1)\n"
"      return max(0, min(1 - 1e-6, x))\n"
"\n"
"  @ti.kernel\n"
"  def inc(self):\n"
"    for i, j in self.val:\n"
"      ti.atomic_add(self.val[i, j], self.increment)\n"
"\n"
"  @ti.kernel\n"
"  def inc2(self, increment: ti.i32):\n"
"    for i, j in self.val:\n"
"      ti.atomic_add(self.val[i, j], increment)\n"
"\n"
"  @ti.kernel\n"
"  def reduce(self):\n"
"    for i, j in self.val:\n"
"      ti.atomic_add(self.total, self.val[i, j] * 4)\n"
"\n"
"arr = Array2D(128, 128, 3)\n"
"\n"
"double_total = ti.var(ti.f32, shape=())\n"
"\n"
"ti.root.lazy_grad()\n"
"\n"
"arr.inc()\n"
"arr.inc.grad()\n"
"assert arr.val[3, 4] == 3\n"
"arr.inc2(4)\n"
"assert arr.val[3, 4] == 7\n"
"\n"
"with ti.Tape(loss=arr.total):\n"
"  arr.reduce()\n"
"\n"
"for i in range(arr.n):\n"
"  for j in range(arr.m):\n"
"    assert arr.val.grad[i, j] == 4\n"
"\n"
"@ti.kernel\n"
"def double():\n"
"  double_total[None] = 2 * arr.total\n"
"\n"
"with ti.Tape(loss=double_total):\n"
"  arr.reduce()\n"
"  double()\n"
"\n"
"for i in range(arr.n):\n"
"  for j in range(arr.m):\n"
"    assert arr.val.grad[i, j] == 8"
